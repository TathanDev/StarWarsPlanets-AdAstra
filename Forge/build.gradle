plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id "com.modrinth.minotaur" version "2.+"

}

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")

    implementation fg.deobf("earth.terrarium:botarium-forge-1.20:$rootProject.botarium_version")


    //implementation fg.deobf ("com.teamresourceful.resourcefulconfig:resourcefulconfig-forge-$resourcefulconfig_version")
    //implementation fg.deobf( "com.teamresourceful.resourcefullib:resourcefullib-forge-$resourcefullib_version")
    implementation fg.deobf( "com.terraformersmc:modmenu:$rootProject.modmenu_version")

    implementation fg.deobf("com.teamresourceful.resourcefullib:resourcefullib-forge-1.20.1:$rootProject.resourcefullib_version")
    //implementation fg.deobf("curse.maven:resourcefullib-570073:4378849")

    implementation fg.deobf("com.teamresourceful.resourcefulconfig:resourcefulconfig-forge-1.20:$rootProject.resourcefulconfig_version")


    implementation fg.deobf("curse.maven:adastra-$rootProject.ad_astra_projectid:4606233")

    implementation fg.deobf("curse.maven:jei-238222:4690097")
    implementation fg.deobf("vazkii.patchouli:Patchouli:1.20.1-81-FORGE")

    //implementation fg.deobf("earth.terrarium:ad_astra-forge-$rootProject.minecraft_version:$rootProject.ad_astra_version")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-77")
    //mpileOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-77:api")


}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "star-wars-planets-ad-astra"
    versionName = "[Forge] SWPlanets ${version}"// This can be the project ID or the slug. Either will work!// This can be the project ID or the slug. Either will work!
    versionNumber = "${version}" // You don't need to set this manually. Will fail if Modrinth has this version already
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = ["1.20.1"] // Must be an array, even with only one version
    loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle

}
